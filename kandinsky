<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kandinsky Inspired Treehouse Animation</title>
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #ffffff; /* White background */
        }
        canvas {
            border: 1px solid black;
            background: #ffffff; /* White background */
        }
    </style>
</head>
<body>
    <canvas id="canvas" width="800" height="600"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        // Customizable variables
        let treeTrunkColor = '#000000'; // Color for tree trunk
        let treeTrunkWidth = 2; // Width of tree trunk strokes
        let branchColor = '#000000'; // Default color for branches (can be randomized)
        let branchWidth = 4; // Width of branch strokes
        let houseColor = '#000000'; // Color for house body
        let roofColor = '#ff0000'; // Color for roof
        let doorColor = '#ffff00'; // Color for door
        let windowColor = '#00ffff'; // Color for windows

        let angle = 0;

        function drawScene() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw the background
            ctx.fillStyle = '#ffffff'; // White background
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw abstract elements inspired by Kandinsky
            drawAbstractElements();

            // Draw the tree with abstract style
            drawTree(400, 400);

            // Draw the treehouse
            drawTreehouse(360, 300);

            // Increment the angle for animation
            angle += 0.01;

            // Request the next frame
            requestAnimationFrame(drawScene);
        }

        function drawAbstractElements() {
            // Example of abstract elements in the background
            drawCircle(200, 150, 50, '#ff0000'); // Red circle
            drawCircle(600, 450, 40, '#0000ff'); // Blue circle
            drawRectangle(300, 400, 80, 120, '#00ff00'); // Green rectangle
            drawLine(50, 50, 750, 550, '#ff00ff'); // Magenta line
        }

        function drawCircle(x, y, radius, color) {
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2);
            ctx.fillStyle = color;
            ctx.fill();
        }

        function drawRectangle(x, y, width, height, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x, y, width, height);
        }

        function drawLine(x1, y1, x2, y2, color) {
            ctx.strokeStyle = color;
            ctx.lineWidth = 4;
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
        }

        function drawTree(x, y) {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(Math.sin(angle) * 0.02);

            // Trunk (abstract lines and shapes)
            ctx.strokeStyle = treeTrunkColor; // Use customizable color for trunk
            ctx.lineWidth = treeTrunkWidth; // Use customizable width for trunk
            ctx.beginPath();
            ctx.moveTo(-20, 0);
            ctx.lineTo(-20, 200);
            ctx.lineTo(20, 200);
            ctx.lineTo(20, 0);
            ctx.stroke();

            // Branches (abstract lines)
            drawAbstractBranch(-20, 100, -100, -100);
            drawAbstractBranch(20, 100, 100, -100);

            ctx.restore();
        }

        function drawAbstractBranch(x1, y1, x2, y2) {
            ctx.strokeStyle = getRandomColor(); // Use random colors for branches
            ctx.lineWidth = branchWidth; // Use customizable width for branches
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();

            // Add smaller branches for a more abstract look
            if (Math.abs(x2 - x1) > 20) {
                drawAbstractBranch(x2, y2, x2 + (Math.random() - 0.5) * 100, y2 + (Math.random() - 0.5) * 100);
                drawAbstractBranch(x2, y2, x2 + (Math.random() - 0.5) * 100, y2 + (Math.random() - 0.5) * 100);
            }
        }

        function getRandomColor() {
            const colors = ['#ff0000', '#00ff00', '#0000ff', '#ff00ff', '#00ffff', '#ffff00'];
            return colors[Math.floor(Math.random() * colors.length)];
        }

        function drawTreehouse(x, y) {
            ctx.save();
            ctx.translate(x, y);

            // House body (abstract geometric shapes)
            ctx.fillStyle = houseColor; // Use customizable color for house
            ctx.fillRect(-40, -60, 80, 100);

            // Roof (triangle)
            ctx.beginPath();
            ctx.moveTo(-50, -60);
            ctx.lineTo(0, -110);
            ctx.lineTo(50, -60);
            ctx.closePath();
            ctx.fillStyle = roofColor; // Use customizable color for roof
            ctx.fill();

            // Door
            ctx.fillStyle = doorColor; // Use customizable color for door
            ctx.fillRect(-10, 10, 20, 30);
            ctx.strokeRect(-10, 10, 20, 30);

            // Windows
            ctx.fillStyle = windowColor; // Use customizable color for windows
            ctx.fillRect(-30, -40, 20, 20);
            ctx.strokeRect(-30, -40, 20, 20);
            ctx.fillRect(10, -40, 20, 20);
            ctx.strokeRect(10, -40, 20, 20);

            ctx.restore();
        }

        drawScene();
    </script>
</body>
</html>
